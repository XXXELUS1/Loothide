;(async () => {
  // --- Init Telegram WebApp or fallback to test-id ---
  const tg = window.Telegram?.WebApp;
  const userId = tg?.initDataUnsafe
    ? tg.initDataUnsafe.user.id
    : 12345;      // —Ç–µ—Å—Ç–æ–≤—ã–π ID –ø—Ä–∏ localhost –∏–ª–∏ –ø—Ä—è–º–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏

  // --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã ---
  const API_BASE   = window.location.origin;
  const D_C        = 0.05;   // +5% –∫ –º–Ω–æ–∂–∏—Ç–µ–ª—é –∑–∞ –∫–ª–∏–∫
  const COMMISSION = 0.10;   // 10% –∫–æ–º–∏—Å—Å–∏—è
  const MAX_HIDE   = 2;
  const SPAWN_INT  = 3000;   // –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–∞–¥–µ–Ω–∏—è –∫–æ–∏–Ω–æ–≤ (ms)

  // --- DOM-—É–∑–ª—ã ---
  const balanceEl    = document.getElementById("balance");
  const roundIdEl    = document.getElementById("roundId");
  const stakeInput   = document.getElementById("stakeInput");
  const quickBtns    = document.querySelectorAll("#quick-stakes button");
  const playBtn      = document.getElementById("playBtn");
  const startMenu    = document.getElementById("start-controls");
  const statusDiv    = document.getElementById("status");
  const multiplierEl = document.getElementById("multiplier");
  const onhandEl     = document.getElementById("onhand");
  const riskEl       = document.getElementById("risk");
  const hiddenEl     = document.getElementById("hidden");
  const gameField    = document.getElementById("game-field");
  const controlsDiv  = document.getElementById("controls");
  const hideBtn      = document.getElementById("hideBtn");
  const cashoutBtn   = document.getElementById("cashoutBtn");

  // --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---
  let stake       = 0;
  let gameId      = null;
  let crashPoint  = 0;
  let clicks      = 0;
  let multiplier  = 1;
  let hidden      = 0;
  let hideCount   = 0;
  let spawnTimer  = null;

  // --- –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ —ç–∫—Ä–∞–Ω–µ ---
  async function refreshBalance() {
    try {
      const res = await fetch(`${API_BASE}/user/balance/${userId}`);
      if (!res.ok) throw new Error(`status ${res.status}`);
      const { balance } = await res.json();
      balanceEl.textContent = balance.toFixed(2);
    } catch (e) {
      console.error("refreshBalance:", e);
      balanceEl.textContent = "‚Äì";
    }
  }
  // –ù–∞—á–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤
  await refreshBalance();

  // --- –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–æ–∫ ---
  quickBtns.forEach(btn => {
    btn.onclick = () => stakeInput.value = btn.dataset.value;
  });

  // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HUD (–º–Ω–æ–∂–∏—Ç–µ–ª—å, –Ω–∞ —Ä—É–∫–∞—Ö, —Ä–∏—Å–∫, —Å–ø—Ä—è—Ç–∞–Ω–æ) ---
  function updateStatus() {
    const onHand = stake * multiplier - hidden;
    // –†–∏—Å–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø—É—Ç–∏ 1‚ÜícrashPoint
    const risk = Math.min(1, (multiplier - 1) / (crashPoint - 1)) * 100;
    multiplierEl.textContent = `x${multiplier.toFixed(2)}`;
    onhandEl.textContent     = onHand.toFixed(2);
    riskEl.textContent       = `${risk.toFixed(1)}%`;
    hiddenEl.textContent     = hidden.toFixed(2);
  }

  // --- –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
  function resetToMenu() {
    clearInterval(spawnTimer);
    gameField.innerHTML       = "";
    gameField.style.display   = "none";
    controlsDiv.style.display = "none";
    statusDiv.style.display   = "none";
    startMenu.style.display   = "flex";
    roundIdEl.textContent     = "‚Äî";
    stakeInput.value          = "";
    hideCount                 = 0;
    refreshBalance();
  }

  // --- –ü–æ—è–≤–ª–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ ¬´–∫–æ–∏–Ω—É¬ª ---
  function spawnCoin() {
    const coin = document.createElement("div");
    coin.className   = "coin";
    coin.textContent = "$";
    coin.style.left  = `${Math.random() * (gameField.clientWidth - 24)}px`;
    coin.onclick     = () => {
      coin.remove();
      clicks++;
      multiplier = +(1 + D_C * clicks).toFixed(2);
      if (multiplier >= crashPoint) {
        handleCrash();
      } else {
        updateStatus();
      }
    };
    coin.addEventListener("animationend", () => coin.remove());
    gameField.appendChild(coin);
  }

  // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∞—à–∞ (–≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç ¬´—Å–ø—Ä—è—Ç–æ–∫¬ª) ---
  async function handleCrash() {
    clearInterval(spawnTimer);
    hideBtn.disabled = cashoutBtn.disabled = true;

    gameField.innerHTML = `
      <h2 style="color:#e74c3c; text-align:center; margin-top:2rem">
        üí• –ö—Ä–∞—à –Ω–∞ ${multiplier.toFixed(2)}√ó
      </h2>`;

    // –ê–≤—Ç–æ-–∫–∞—à–∞—É—Ç —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
    try {
      const resp = await fetch(`${API_BASE}/game/cashout`, {
        method:  "POST",
        headers: { "Content-Type": "application/json" },
        body:    JSON.stringify({ game_id: gameId })
      });
      if (resp.ok) {
        const { payout } = await resp.json();
        gameField.innerHTML += `
          <h3 style="color:#f1c40f; text-align:center">
            üóÑÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${payout.toFixed(2)}
          </h3>`;
        await refreshBalance();
      }
    } catch (e) {
      console.error("handleCrash cashout:", e);
    }

    setTimeout(resetToMenu, 2000);
  }

  // --- –°—Ç–∞—Ä—Ç —Ä–∞—É–Ω–¥–∞ ---
  playBtn.onclick = async () => {
    stake = parseFloat(stakeInput.value);
    if (!stake || stake <= 0) return alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É");

    try {
      const res = await fetch(`${API_BASE}/game/start`, {
        method:  "POST",
        headers: { "Content-Type": "application/json" },
        body:    JSON.stringify({ user_id: userId, stake })
      });
      if (!res.ok) throw new Error(`start ${res.status}`);
      const data = await res.json();
      gameId     = data.game_id;
      crashPoint = data.crash_point;
      roundIdEl.textContent = gameId.slice(0, 8);

      await refreshBalance();

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º UI –≤ —Ä–µ–∂–∏–º ¬´–∏–≥—Ä—ã¬ª
      startMenu.style.display   = "none";
      gameField.style.display   = "block";
      controlsDiv.style.display = "flex";
      statusDiv.style.display   = "block";

      // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
      clicks     = 0;
      multiplier = 1;
      hidden     = 0;
      hideCount  = 0;
      hideBtn.disabled    = false;
      cashoutBtn.disabled = false;
      updateStatus();

      // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–∏–Ω–æ–≤
      spawnTimer = setInterval(spawnCoin, SPAWN_INT);
    } catch (e) {
      console.error("start error:", e);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É");
    }
  };

  // --- –°–ø—Ä—è—Ç–∞—Ç—å —á–∞—Å—Ç—å ¬´on-hand¬ª (–¥–æ MAX_HIDE —Ä–∞–∑) ---
  hideBtn.onclick = async () => {
    if (hideCount >= MAX_HIDE) {
      return alert(`–ú–∞–∫—Å–∏–º—É–º ${MAX_HIDE} —Å–ø—Ä—è—Ç–æ–∫`);
    }
    const onHand = stake * multiplier - hidden;
    if (onHand <= 0) {
      return alert("–ù–µ—á–µ–≥–æ –ø—Ä—è—Ç–∞—Ç—å");
    }
    // 1) –±–µ—Ä—ë–º —á–∞—Å—Ç—å ‚Üí 2) —Å–Ω–∏–º–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é —Å—Ä–∞–∑—É
    let keep = +(onHand * (1 - COMMISSION)).toFixed(2);

    try {
      const resp = await fetch(`${API_BASE}/game/hide`, {
        method:  "POST",
        headers: { "Content-Type": "application/json" },
        body:    JSON.stringify({ game_id: gameId, amount: keep })
      });
      if (!resp.ok) throw new Error(`hide ${resp.status}`);
      const { hidden: got } = await resp.json();
      hidden += got;
      hideCount++;
      updateStatus();
    } catch (e) {
      console.error("hide error:", e);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø—Ä—è—Ç–∞—Ç—å");
    }
  };

  // --- –ö–∞—à–∞—É—Ç (–≤—ã–±—Ä–∞—Ç—å –≤—Å—ë: on-hand + —Å–∫—Ä—ã—Ç–æ–µ) ---
  cashoutBtn.onclick = async () => {
    clearInterval(spawnTimer);
    hideBtn.disabled    = true;
    cashoutBtn.disabled = true;

    try {
      const resp = await fetch(`${API_BASE}/game/cashout`, {
        method:  "POST",
        headers: { "Content-Type": "application/json" },
        body:    JSON.stringify({ game_id: gameId })
      });
      if (!resp.ok) throw new Error(`cashout ${resp.status}`);
      const { payout } = await resp.json();
      gameField.innerHTML = `
        <h2 style="color:#2ecc71; text-align:center; margin-top:2rem">
          üèÜ –í—ã –∑–∞–±—Ä–∞–ª–∏ ${payout.toFixed(2)}
        </h2>`;
      await refreshBalance();
    } catch (e) {
      console.error("cashout error:", e);
      gameField.innerHTML = `
        <h2 style="color:#e67e22; text-align:center; margin-top:2rem">
          –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ
        </h2>`;
    } finally {
      setTimeout(resetToMenu, 2000);
    }
  };
})();
