# bot/handlers/play.py

import aiohttp
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
)
from config import API_BASE

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
ASK_STAKE, IN_GAME = range(2)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
MIN_HIDE_PCT = 0.30   # –º–∏–Ω–∏–º—É–º 30% –æ—Ç —Ç–µ–∫—É—â–µ–π —Å—É–º–º—ã —Å–ø—Ä—è—Ç–∫–∏

def build_game_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üì¶ –°–ø—Ä—è—Ç–∞—Ç—å", callback_data="hide"),
        InlineKeyboardButton("üèÉ –ó–∞–±—Ä–∞—Ç—å",  callback_data="cashout"),
    ]])

async def play_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 1: –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Å—Ç–∞–≤–∫—É."""
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤):",
        reply_markup=ReplyKeyboardRemove()
    )
    return ASK_STAKE

async def play_receive_stake(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 2: –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–≤–∫—É, –≤—ã–∑–≤–∞—Ç—å /game/start –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å."""
    text = update.message.text.strip()
    if not text.isdigit() or int(text) <= 0:
        await update.message.reply_text("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return ASK_STAKE

    stake = float(text)
    user_id = update.effective_user.id

    # 1) –°—Ç–∞—Ä—Ç –∏–≥—Ä—ã –Ω–∞ –±–µ–∫–µ–Ω–¥–µ
    async with aiohttp.ClientSession() as sess:
        resp = await sess.post(f"{API_BASE}/game/start", json={"user_id": user_id, "stake": stake})
        if resp.status != 200:
            err = await resp.json()
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã: {err.get('detail') or err}")
            return ConversationHandler.END
        data = await resp.json()

    game_id = data["game_id"]
    ctx.user_data["game_id"] = game_id

    # 2) –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await update.message.reply_text(
        f"–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! üî∞\nGame ID: {game_id}\n‚è≥ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å..."
    )
    chat_id = update.effective_chat.id
    msg_id  = msg.message_id

    # 3) –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ JobQueue
    async def _job_callback(context: ContextTypes.DEFAULT_TYPE):
        await _update_status_inner(context, chat_id, msg_id, game_id)

    job = ctx.application.job_queue.run_repeating(
        _job_callback,
        interval=1.0,
        first=1.0
    )
    ctx.user_data["status_job"] = job

    return IN_GAME

async def _update_status_inner(
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    msg_id: int,
    game_id: str
):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ context —á–µ—Ä–µ–∑ context.job."""
    async with aiohttp.ClientSession() as sess:
        resp = await sess.get(f"{API_BASE}/game/status/{game_id}")
        data = await resp.json()

    # –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if data["status"] != "active":
        if job := context.job:
            job.schedule_removal()
        total = data.get("current_amount", 0) + data.get("hidden_amount", 0)
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=msg_id,
            text=f"üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í–∞—à –≤—ã–∏–≥—Ä—ã—à: {total:.2f} –∫–æ–∏–Ω–æ–≤"
        )
        return

    # –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.edit_message_text(
        chat_id=chat_id,
        message_id=msg_id,
        text=(
            f"‚è≥ –ò–¥—ë—Ç –∏–≥—Ä–∞\n"
            f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{data['multiplier']:.2f}\n"
            f"–ù–∞ —Ä—É–∫–∞—Ö: {data['current_amount']:.2f}\n"
            f"–í —Ç–∞–π–Ω–∏–∫–µ: {data['hidden_amount']:.2f}\n"
            f"–†–∏—Å–∫: {data['risk_level']}%\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        ),
        reply_markup=build_game_keyboard()
    )

async def hide_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è ¬´–°–ø—Ä—è—Ç–∞—Ç—å¬ª."""
    query = update.callback_query
    await query.answer()
    game_id = ctx.user_data.get("game_id")
    if not game_id:
        return await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞—É–Ω–¥.")

    # –£–∑–Ω–∞—ë–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É
    async with aiohttp.ClientSession() as sess:
        st = await sess.get(f"{API_BASE}/game/status/{game_id}")
        status = await st.json()
        curr = status.get("current_amount", 0)
        amount = curr * MIN_HIDE_PCT

        hide_resp = await sess.post(
            f"{API_BASE}/game/hide",
            json={"game_id": game_id, "amount": amount}
        )
        if hide_resp.status != 200:
            err = await hide_resp.json()
            return await query.edit_message_text(f"–û—à–∏–±–∫–∞ —Å–ø—Ä—è—Ç–∫–∏: {err}")
        result = await hide_resp.json()

    await query.edit_message_text(
        f"‚úÖ –°–ø—Ä—è—Ç–∞–Ω–æ: {result['hidden']:.2f} –∫–æ–∏–Ω–æ–≤\n"
        f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {result['fee']:.2f} –∫–æ–∏–Ω–æ–≤\n\n"
        "–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è‚Ä¶",
        reply_markup=build_game_keyboard()
    )

async def cashout_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è ¬´–ó–∞–±—Ä–∞—Ç—å¬ª."""
    query = update.callback_query
    await query.answer()
    game_id = ctx.user_data.get("game_id")
    if not game_id:
        return await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞—É–Ω–¥.")

    async with aiohttp.ClientSession() as sess:
        resp = await sess.post(
            f"{API_BASE}/game/cashout",
            json={"game_id": game_id}
        )
        data = await resp.json()

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
    if job := ctx.user_data.get("status_job"):
        job.schedule_removal()

    total = data.get("payout", 0)
    await query.edit_message_text(
        f"üèÜ –í—ã –∑–∞–±—Ä–∞–ª–∏: {total:.2f} –∫–æ–∏–Ω–æ–≤\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!"
    )
    return ConversationHandler.END

async def cancel_play(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ /cancel –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –∏–≥—Ä—É."""
    if job := ctx.user_data.get("status_job"):
        job.schedule_removal()
    await update.message.reply_text("–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END
